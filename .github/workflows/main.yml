# GitHub Actions Workflow für Azure App Service Deployment
# 
# WICHTIGE SETUP-SCHRITTE:
# 1. Gehen Sie zu Azure Portal → Ihr App Service → Deployment Center
# 2. Wählen Sie "GitHub Actions" als Deployment-Methode
# 3. Laden Sie das Publish Profile herunter (Button "Get publish profile")
# 4. Gehen Sie zu GitHub → Ihr Repository → Settings → Secrets and variables → Actions
# 5. Erstellen Sie ein neues Repository Secret mit dem Namen "AZURE_WEBAPP_PUBLISH_PROFILE"
# 6. Kopieren Sie den gesamten Inhalt der heruntergeladenen .publishsettings Datei in das Secret
# 7. Der Workflow wird automatisch bei jedem Push in den main-Branch ausgeführt

name: Deploy Node.js App to Azure App Service

# Trigger: Workflow wird bei jedem Push in den main-Branch ausgeführt
on:
  push:
    branches:
      - main
  workflow_dispatch: # Ermöglicht manuelles Ausführen des Workflows

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      # 1. Code aus Repository herunterladen
      - name: 'Checkout Code'
        uses: actions/checkout@v4
        
      # 2. Node.js Umgebung einrichten (Version 18.x für beste Kompatibilität)
      - name: 'Setup Node.js 18.x'
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'
          
      # 3. Node.js Abhängigkeiten installieren
      - name: 'Install Dependencies'
        run: |
          npm ci --only=production
          
      # 4. Anwendung bauen (falls Build-Schritt vorhanden)
      - name: 'Build Application'
        run: |
          npm run build
          
      # 5. Produktionsdateien für Deployment vorbereiten
      - name: 'Prepare Deployment Files'
        run: |
          # Erstelle deployment-spezifische package.json (nur Produktions-Dependencies)
          node -e "
            const pkg = require('./package.json');
            const deployPkg = {
              name: pkg.name,
              version: pkg.version,
              type: pkg.type,
              scripts: { start: pkg.scripts.start },
              dependencies: pkg.dependencies,
              optionalDependencies: pkg.optionalDependencies || {}
            };
            require('fs').writeFileSync('./package.json', JSON.stringify(deployPkg, null, 2));
          "
          
          # Stelle sicher, dass alle notwendigen Dateien vorhanden sind
          ls -la
          echo "Build-Verzeichnis Inhalt:"
          ls -la dist/ || echo "Kein dist-Verzeichnis gefunden"
          
      # 6. Deployment zu Azure App Service
      - name: 'Deploy to Azure App Service'
        uses: azure/webapps-deploy@v2
        with:
          app-name: '${{ secrets.AZURE_WEBAPP_NAME }}' # Optional: App Name als Secret
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: .
          
      # 7. Deployment-Verifikation (optional)
      - name: 'Verify Deployment'
        run: |
          echo "Deployment erfolgreich abgeschlossen!"
          echo "Ihre Anwendung sollte nun unter der Azure App Service URL erreichbar sein."
          echo "Überprüfen Sie die Azure Portal Logs für weitere Details."

# NOTIZEN FÜR DIE AZURE-KONFIGURATION:
# 
# A) PUBLISH PROFILE EINRICHTUNG:
#    - Azure Portal → App Service → Deployment Center → Download Publish Profile
#    - GitHub → Repository → Settings → Secrets → New Repository Secret
#    - Name: AZURE_WEBAPP_PUBLISH_PROFILE
#    - Wert: Gesamter Inhalt der .publishsettings Datei
#
# B) AZURE APP SERVICE EINSTELLUNGEN:
#    - Runtime Stack: Node.js 18 LTS
#    - Operating System: Linux
#    - Startup Command: bash startup.sh
#    - Application Settings: OPENAI_API_KEY (siehe Anleitung unten)
#
# C) UMGEBUNGSVARIABLEN IN AZURE:
#    - Gehen Sie zu: Azure Portal → Ihr App Service → Configuration → Application Settings
#    - Fügen Sie hinzu: OPENAI_API_KEY = Ihr_OpenAI_API_Schlüssel
#    - Speichern Sie die Einstellungen (die App wird automatisch neu gestartet)