# =================================================================
# FINALER, FUNKTIONIERENDER WORKFLOW (SERVICE-PRINCIPAL-METHODE)
# =================================================================
name: Build and Deploy Container to Azure

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  # ------ JOB 1: Baut das Docker-Image und pusht es in Ihre ACR ------
  build:
    runs-on: ubuntu-latest
    outputs:
      image_name: ${{ steps.build-and-push.outputs.image }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Azure Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.ACR_LOGIN_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.ACR_LOGIN_SERVER }}/product-information-generator:${{ github.sha }}

  # ------ JOB 2: Stellt das Image in Azure bereit ------
  deploy:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      # Schritt 2.1: Anmelden bei Azure mit dem Service Principal
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          
      # Schritt 2.2: Bereitstellen in der Azure Web App
      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v2
        with:
          app-name: 'Product-Information-Generator-Final'
          images: ${{ needs.build.outputs.image_name }}
