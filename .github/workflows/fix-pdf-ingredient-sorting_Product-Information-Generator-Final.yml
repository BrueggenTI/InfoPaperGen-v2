# =================================================================
# FINALE, FUNKTIONIERENDE WORKFLOW-DATEI (PUBLISH-PROFILE-METHODE)
# =================================================================
name: Build and Deploy Container to Azure Web App

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  # ------ JOB 1: Baut das Docker-Image und pusht es in Ihre ACR ------
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Azure Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.ACR_LOGIN_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.ACR_LOGIN_SERVER }}/pipg:${{ github.sha }}

  # ------ JOB 2: Stellt das Image in Azure bereit (mit Publish Profile) ------
  deploy:
    runs-on: ubuntu-latest
    needs: build # Wartet, bis der Build-Job erfolgreich ist

    steps:
      # In dieser Methode wird der "Azure Login"-Schritt nicht ben√∂tigt.

      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v2
        with:
          app-name: 'Product-Information-Generator-Final'
          # WICHTIG: Der Image-Name wird hier direkt konstruiert, um das
          # Secret-Masking-Problem von GitHub Actions zu umgehen.
          images: '${{ secrets.ACR_LOGIN_SERVER }}/pipg:${{ github.sha }}'
          # Verwendet das Publish Profile zur Authentifizierung
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
