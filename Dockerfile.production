# PRODUKTIONS-DOCKERFILE FÜR AZURE APP SERVICE
# Optimiert für Puppeteer PDF-Generierung mit Google Chrome
FROM node:18-slim

# Schritt 1: Root-Benutzer für Paketinstallation
USER root

# Schritt 2: Arbeitsverzeichnis früh setzen
WORKDIR /usr/src/app

# Schritt 3: Basis-System-Updates
RUN apt-get update && apt-get upgrade -y

# Schritt 4: Erweiterte Systemabhängigkeiten für Chrome/Puppeteer
RUN apt-get install -y \
    apt-transport-https \
    ca-certificates \
    curl \
    gnupg \
    hicolor-icon-theme \
    libasound2 \
    libatk-bridge2.0-0 \
    libatk1.0-0 \
    libc6 \
    libcairo2 \
    libcups2 \
    libdbus-1-3 \
    libexpat1 \
    libfontconfig1 \
    libgcc1 \
    libgconf-2-4 \
    libgdk-pixbuf2.0-0 \
    libglib2.0-0 \
    libgtk-3-0 \
    libnspr4 \
    libpango-1.0-0 \
    libpangocairo-1.0-0 \
    libstdc++6 \
    libx11-6 \
    libx11-xcb1 \
    libxcb1 \
    libxcomposite1 \
    libxcursor1 \
    libxdamage1 \
    libxext6 \
    libxfixes3 \
    libxi6 \
    libxrandr2 \
    libxrender1 \
    libxss1 \
    libxtst6 \
    fonts-liberation \
    fonts-dejavu-core \
    fontconfig \
    libnss3 \
    lsb-release \
    xdg-utils \
    wget \
    --no-install-recommends

# Schritt 5: Google Chrome Repository und Installation - METHODE 1
RUN wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | gpg --dearmor -o /usr/share/keyrings/googlechrome-linux-keyring.gpg \
    && sh -c 'echo "deb [arch=amd64 signed-by=/usr/share/keyrings/googlechrome-linux-keyring.gpg] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list' \
    && apt-get update \
    && apt-get install -y google-chrome-stable

# Schritt 6: Fallback Chrome Installation - METHODE 2 (falls Methode 1 fehlschlägt)
RUN if ! command -v google-chrome &> /dev/null; then \
        wget -q --continue --no-check-certificate -O chrome-linux.deb https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb \
        && apt-get install -y ./chrome-linux.deb \
        && rm chrome-linux.deb; \
    fi

# Schritt 7: Chrome Installation verifizieren und Debugging-Informationen
RUN google-chrome --version \
    && which google-chrome \
    && ls -la /usr/bin/google-chrome* \
    && echo "Chrome installation successful"

# Schritt 8: Cache aufräumen
RUN rm -rf /var/lib/apt/lists/* \
    && apt-get clean \
    && rm -rf /tmp/* /var/tmp/*

# Schritt 9: Package.json kopieren und Dependencies installieren
COPY package*.json ./
RUN npm ci --only=production && npm cache clean --force

# Schritt 10: Source Code kopieren
COPY . .

# Schritt 11: Produktions-Build erstellen
RUN npm run build

# Schritt 12: Non-root Benutzer für Sicherheit
RUN groupadd -g 1001 -r nodejs \
    && useradd -r -g nodejs -u 1001 nodejs \
    && chown -R nodejs:nodejs /usr/src/app
USER nodejs

# Schritt 13: Port und Health Check
EXPOSE 8080
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8080/api/health || exit 1

# Schritt 14: Chrome Path als Environment Variable
ENV PUPPETEER_EXECUTABLE_PATH=/usr/bin/google-chrome-stable

# Schritt 15: Startup Befehl
CMD ["npm", "start"]