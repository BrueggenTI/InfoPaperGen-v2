Hallo, ich habe in diesem Repl eine Node.js-Anwendung entwickelt. Die Anwendung nutzt eine OpenAI-Integration und generiert PDFs mit Puppeteer und Chromium.
Mein Ziel ist es, diese Anwendung direkt aus meinem Code in einer Azure App Service Instanz (Linux) bereitzustellen. Ich möchte keine Docker-Container verwenden. Der Deployment-Prozess soll über GitHub Actions automatisiert werden, sobald ich Änderungen in mein GitHub-Repository pushe.
Bitte konfiguriere mein Projekt für dieses Vorhaben optimal. Erstelle und konfiguriere dazu die notwendigen Dateien und gib mir eine detaillierte Anleitung für die manuellen Schritte in Azure und GitHub.
1. GitHub Actions Workflow für Code-Bereitstellung erstellen
Erstelle eine GitHub Actions Workflow-Datei unter .github/workflows/main.yml. Dieser Workflow soll:
Bei jedem Push in den main-Branch meines GitHub-Repositorys getriggert werden.
Eine Node.js-Umgebung einrichten (z.B. Version 18.x).
Alle npm-Abhängigkeiten installieren (npm install).
(Optional, falls vorhanden) Einen Build-Schritt ausführen (npm run build).
Den Code mithilfe der azure/webapps-deploy@v2 Action in meiner Azure App Service Instanz bereitstellen.
Der Workflow muss ein Publish Profile von Azure verwenden, das ich als GitHub Secret namens AZURE_WEBAPP_PUBLISH_PROFILE bereitstellen werde.
Bitte füge Kommentare in die Workflow-Datei ein, die genau erklären, wo und wie ich das Publish Profile in GitHub hinterlegen muss.
2. Startup-Skript für Chromium-Installation erstellen
Da die Azure App Service (Linux) Umgebung standardmäßig kein Chromium installiert hat, benötigen wir ein Start-Skript. Erstelle eine Datei namens startup.sh im Hauptverzeichnis. Dieses Skript soll:
Zuerst die Paketlisten aktualisieren (apt-get update).
Chromium und notwendige Schriftarten im Hintergrund installieren, um Timeouts zu vermeiden (apt-get install -y chromium-browser --no-install-recommends).
Anschließend meine Node.js-Anwendung starten (z.B. mit npm start oder node index.js).
Dieses Skript wird später als "Startbefehl" in den Azure App Service Einstellungen konfiguriert.
3. Puppeteer-Konfiguration im Code anpassen
Bitte überprüfe meinen Code und stelle sicher, dass die Puppeteer-Konfiguration für die Azure-Umgebung angepasst ist. Die puppeteer.launch() Funktion sollte wie folgt konfiguriert werden:
code
JavaScript
const browser = await puppeteer.launch({
  executablePath: '/usr/bin/chromium-browser',
  args: ['--no-sandbox', '--disable-setuid-sandbox']
});
executablePath: Muss auf den Pfad des im Startup-Skript installierten Chromium-Browsers verweisen.
args: Die --no-sandbox und --disable-setuid-sandbox Flags sind für den Betrieb in der Linux-Umgebung von Azure App Service unerlässlich.
4. Umgang mit Secrets (OpenAI API Key)
Der OpenAI API Key darf nicht im Code stehen.
Passe den Code so an, dass der API-Key aus einer Umgebungsvariable (process.env.OPENAI_API_KEY) gelesen wird.
Gib mir in der Anleitung einen klaren Hinweis, wie ich diese Umgebungsvariable als "Anwendungseinstellung" in Azure App Service sicher hinterlegen kann.